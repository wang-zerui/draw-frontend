(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-1d44fc92"],{"68a5":function(n,e,s){"use strict";s("a4bc")},"97a8":function(n,e,s){"use strict";s.r(e);var t=function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"hello"},[s("a-card",{attrs:{bodyStyle:{height:"800px","padding-right":"1px","padding-left":"1px","padding-top":"1px","padding-bottom":"0px"},title:"词法分析器"}},[s("codemirror",{attrs:{options:n.cmOptions},model:{value:n.code,callback:function(e){n.code=e},expression:"code"}})],1)],1)},l=[],o=(s("db91"),s("b866"),s("31c5"),s("10b2"),s("4ba6"),s("8c33"),s("7289"),s("2aed"),s("d72f"),s("b933"),s("0b6c"),s("2e6e"),{name:"Compiler",data:function(){return{code:'from Parser import Parser\nimport numpy as np\n\nclass Semantic(Parser):\n    def init(self):\n        self.result = {\n            \'dynamic\': 0,\n            \'grid\': 0,\n            \'title\': "",\n            \'xLabel\': "",\n            \'yLabel\': "",\n            \'lines\': []\n        }\n\n    # 计算xy\n    def getDots(self, x, y):\n        x *= self.x_scale\n        y *= self.y_scale\n        temp1 = x * np.cos(self.rot) + y * np.sin(self.rot)\n        y *= np.cos(self.rot) - x * np.sin(self.rot)\n        x = temp1\n        x += self.x_origin\n        y += self.y_origin\n        dots = [ {\'x\': x[i], \'y\':y[i]} for i in range(len(x))]\n        return dots\n\n    def getScatterDots(self, x, y, r):\n        x *= self.x_scale\n        y *= self.y_scale\n        temp1 = x * np.cos(self.rot) + y * np.sin(self.rot)\n        y *= np.cos(self.rot) - x * np.sin(self.rot)\n        x = temp1\n        x += self.x_origin\n        y += self.y_origin\n        dots = [ {\'x\': x[i], \'y\':y[i], \'r\':r[i]} for i in range(len(x))]\n        return dots\n\n    # override\n    def recordLine(self):\n        dots = None\n        if self.lineType == "scatter":\n            dots = self.getScatterDots(self.x_ptr, self.y_ptr, self.radius)\n        else:\n            dots = self.getDots(self.x_ptr, self.y_ptr)\n        line = {\n            \'color\': self.color,\n            \'lineType\': self.lineType,\n            \'dots\': dots,\n            \'width\': self.lineWidth\n        }\n        self.result[\'lines\'].append(line)\n\n    # get final result\n    # {\n    #     "dynamic": 0,\n    #     "grid": 0,\n    #     "title": "",\n    #     "xLabel": "x轴名称",\n    #     "yLabel": "y轴名称",\n    #     "lines": [\n    #         {\n    #             "color": "red",\n    #             "lineType": "dotted",\n    #             "dots": [\n    #                 {\n    #                     "x": 1.0,\n    #                     "y": 2.0\n    #                 },{\n    #                     "x": 2.0,\n    #                     "y": 4.0\n    #                 },{\n    #                     "x": 3.0,\n    #                     "y": 6.0\n    #                 }\n    #             ]\n    #         },\n    #         {\n    #             "color": "blue",\n    #             "lineType": "dotted",\n    #             "dots": [\n    #                 {\n    #                     "x": 1.0,\n    #                     "y": 2.0\n    #                 },{\n    #                     "x": 2.0,\n    #                     "y": 4.0\n    #                 },{\n    #                     "x": 3.0,\n    #                     "y": 6.0\n    #                 }\n    #             ]\n    #         }\n    #     ]\n    # }\n    def getResult(self):\n        self.result[\'dynamic\'] = self.dynamicOn\n        self.result[\'grid\'] = self.gridOn\n        self.result[\'title\'] = self.title\n        self.result[\'xLabel\'] = self.x_label\n        self.result[\'yLabel\'] = self.y_label\n        return self.result',cmOptions:{autoCloseBrackets:!0,tabSize:4,styleActiveLine:!0,lineNumbers:!0,line:!0,mode:"text/x-python",theme:"idea",keyMap:"emacs"},option:{},updateOption:{},isImage:!1,isError:!1,isSuccess:!1,errorMsg:"",successMsg:"",collapsed:!1}},methods:{onCmReady:function(n){console.log("the editor is readied!",n)},onCmFocus:function(n){console.log("the editor is focused!",n)},onCmCodeChange:function(n){console.log("this is new code",n),this.code=n}},computed:{},mounted:function(){},components:{}}),i=o,r=(s("68a5"),s("2877")),d=Object(r["a"])(i,t,l,!1,null,null,null);e["default"]=d.exports},a4bc:function(n,e,s){}}]);
//# sourceMappingURL=chunk-1d44fc92.0b6aba2e.js.map